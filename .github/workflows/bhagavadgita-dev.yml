# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Bhagavad Gita Backend Dev

env:
  EB_PACKAGE_S3_BUCKET_NAME: "bhagavad-gita-backend"
  EB_APPLICATION_NAME: "Bhagavad-Gita-Backend"
  EB_ENVIRONMENT_NAME: "BhagavadGitaBackend-env"
  DEPLOY_PACKAGE_NAME: "bg_backend_${{ github.sha }}.zip"
  AWS_REGION_NAME: "us-east-1"

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

jobs:
  ci_job:
    name: CI
    runs-on: ubuntu-latest

    steps:
      - name: Git clone our repo
        uses: actions/checkout@v2

      # ----------- Set up Python + Install Dependencies + Run tests -----------------
      - name: Set up Python 3.6
        uses: actions/setup-python@v1
        with:
          python-version: 3.6
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Lint with flake8
        run: |
          pip install flake8
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      - name: Test with pytest
        run: |
          py.test --cov-report=xml --cov=app tests/
      - uses: codecov/codecov-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
      # !----------- Set up Python + Install Dependencies + Run tests -----------------

      # ----------- Create deployment package + Upload to S3  -------------------------
      - name: Create ZIP deployment package
        if: github.ref == 'refs/heads/master' && job.status == 'success'
        run: zip -r ${{ env.DEPLOY_PACKAGE_NAME }} ./ -x *.git*

      - name: Configure AWS Credentials
        if: github.ref == 'refs/heads/master' && job.status == 'success'
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ${{ env.AWS_REGION_NAME }}

      - name: Copy deployment package to S3 bucket
        if: github.ref == 'refs/heads/master' && job.status == 'success'
        run: aws s3 cp ${{ env.DEPLOY_PACKAGE_NAME }}  s3://${{ env.EB_PACKAGE_S3_BUCKET_NAME }}/

      - name: Print Success Message
        if: github.ref == 'refs/heads/master' && job.status == 'success'
        run: echo "CI pipeline job finished successfully."
      # !----------- Create deployment package + Upload to S3  -------------------------

  cd_job:
    name: CD
    runs-on: ubuntu-latest

    needs: [ci_job]

    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ${{ env.AWS_REGION_NAME }}

      - name: Create new ElasticBeanstalk Application Version
        run: |
          aws elasticbeanstalk create-application-version \
          --application-name ${{ env.EB_APPLICATION_NAME }} \
          --source-bundle S3Bucket="${{ env.EB_PACKAGE_S3_BUCKET_NAME }}",S3Key="${{ env.DEPLOY_PACKAGE_NAME }}" \
          --version-label "Ver-${{ github.sha }}" \
          --description "CommitSHA-${{ github.sha }}"

      - name: Deploy new ElasticBeanstalk Application Version
        run: aws elasticbeanstalk update-environment --environment-name ${{ env.EB_ENVIRONMENT_NAME }} --version-label "Ver-${{ github.sha }}"

      - name: Print Success Message
        run: echo "CD pipeline job finished successfully."
